import streamlit as st
import geopandas as gpd
import plotly.express as px
import folium
from streamlit_folium import st_folium

import geopandas as gpd

# Caminho do shapefile (sem extens√£o, se preferir pode colocar direto "arquivo.shp")
# shapefile_path = "BD_CONSUMO_AGUA_AC._REV1.shp"

# # Ler shapefile
# gdf = gpd.read_file(shapefile_path)

# # Garantir que est√° em WGS84 (lat/lon)
# gdf = gdf.to_crs(epsg=4326)

# # Exportar para GeoJSON
# gdf.to_file("BD_CONSUMO_AGUA_AC.geojson", driver="GeoJSON")

#print("‚úÖ Convers√£o conclu√≠da: BD_CONSUMO_AGUA_AC.geojson gerado com sucesso!")

# CONFIGURA√á√ÉO STREAMLIT
# -----------------------
st.set_page_config(page_title="PMSB - Consumo de √Ågua", layout="wide")
st.title("üíß PMSB de Augusto Corr√™a - PA: Consumo de √Ågua")

# -----------------------
# FUN√á√ÉO PARA CARREGAR POL√çGONOS DO GEOJSON
# -----------------------
@st.cache_data
def load_poligonos():
    # agora l√™ direto o geojson
    gdf = gpd.read_file("BD_CONSUMO_AGUA_AC.geojson")
    gdf = gdf.to_crs(epsg=4326)
    gdf["AREA_y"] = gdf["AREA_y"].fillna("N√£o informado")
    gdf["BAIRRO_COM"] = gdf["BAIRRO_COM"].fillna("N√£o informado")
    return gdf

gdf = load_poligonos()

# -----------------------
# FILTROS DEPENDENTES COM MULTI-SELE√á√ÉO
# -----------------------
col1, col2 = st.columns(2)

with col1:
    area = st.selectbox("√Årea", ["Todas"] + sorted(gdf["AREA_y"].unique().tolist()))

# bairros dependem da √°rea escolhida
if area != "Todas":
    bairros_disponiveis = gdf[gdf["AREA_y"] == area]["BAIRRO_COM"].unique().tolist()
else:
    bairros_disponiveis = gdf["BAIRRO_COM"].unique().tolist()

with col2:
    bairros_sel = st.multiselect("Bairro/Comunidade", sorted(bairros_disponiveis))

# aplicar filtros nos pol√≠gonos
df = gdf.copy()
if area != "Todas":
    df = df[df["AREA_y"] == area]
if bairros_sel:
    df = df[df["BAIRRO_COM"].isin(bairros_sel)]

# -----------------------
# INDICADORES
# -----------------------
st.markdown("### üìä Indicadores Gerais")
col1, col2 = st.columns(2)
with col1:
    st.metric("N¬∫ Domic√≠lios", f"{df['N_domi'].sum():,.0f}")
with col2:
    st.metric("Popula√ß√£o Estimada", f"{df['Pop_estim1'].sum():,.0f}")

# -----------------------
# GR√ÅFICOS
# -----------------------
st.markdown("### üìà Indicadores de Consumo de √Ågua")
col1, col2 = st.columns(2)

with col1:
    fig1 = px.pie(df, names="LABEL_Q5", title="Fonte de √°gua de abastecimento")
    st.plotly_chart(fig1, use_container_width=True)

    fig2 = px.pie(df, names="LABEL_Q8", title="Entrega regular de √°gua")
    st.plotly_chart(fig2, use_container_width=True)

    fig3 = px.pie(df, names="LABEL_Q7", title="Problemas relacionados √† √°gua")
    st.plotly_chart(fig3, use_container_width=True)

with col2:
    fig4 = px.pie(df, names="LABEL_Q6", title="Qualidade da √°gua")
    st.plotly_chart(fig4, use_container_width=True)

    fig5 = px.pie(df, names="LABEL_Q9", title="Falta de √°gua")
    st.plotly_chart(fig5, use_container_width=True)

    fig6 = px.pie(df, names="LABEL_Q10", title="Po√ßo pr√≥ximo de fossa s√©ptica")
    st.plotly_chart(fig6, use_container_width=True)

# -----------------------
# MAPA
# -----------------------
st.markdown("### üó∫Ô∏è Mapa das Comunidades")

if not df.empty:
    center = [df.geometry.centroid.y.mean(), df.geometry.centroid.x.mean()]
    m = folium.Map(location=center, zoom_start=11, tiles="cartodbpositron")

    folium.GeoJson(
        data=df.to_json(),
        name="Pol√≠gonos",
        style_function=lambda x: {
            "fillColor": "#1f78b4",
            "color": "black",
            "weight": 1,
            "fillOpacity": 0.4,
        },
        tooltip=folium.GeoJsonTooltip(
            fields=["AREA_y", "BAIRRO_COM"],
            aliases=["√Årea:", "Bairro:"],
        )
    ).add_to(m)

    # zoom para o filtro aplicado
    bounds = df.total_bounds  # [minx, miny, maxx, maxy]
    m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])

    folium.LayerControl().add_to(m)
    st_folium(m, width=900, height=600)
else:
    st.warning("‚ö†Ô∏è Nenhum pol√≠gono encontrado para os filtros selecionados.")

# -----------------------
# SUGEST√ïES DE MELHORIAS
# -----------------------
st.markdown("### üîß Sugest√µes de Melhorias")
st.write("""
- A√ß√µes educativas  
- Cisternas ou caixas d‚Äô√°gua coletivas  
- Distribui√ß√£o de hipoclorito de s√≥dio  
- Sistemas de tratamento dom√©stico  
- Melhoria no acesso √† rede p√∫blica  
""")